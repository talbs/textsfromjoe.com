@import url(http://fonts.googleapis.com/css?family=Roboto:500,100,300,700,400);
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

a, .conversation__link {
  transition: all 0.25s ease-in-out;
  border-bottom: 1px solid transparent;
  color: #2a9dd7;
  text-decoration: none; }
  a:hover, .conversation__link:hover, a:active, .conversation__link:active, a:focus, .conversation__link:focus {
    border-bottom-color: #00abff;
    color: #00abff; }

.wrapper--conversation:last-child, .message p:last-child {
  margin-bottom: 0;
  padding-bottom: 0;
  border-bottom: none; }

.sr, .is-hidden, .conversation__title, .footer--site {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }

.list--messages {
  list-style: none;
  text-indent: 0; }

.list--messages {
  margin: 0;
  padding: 0; }

h1, h2, h3, h4, h5, h6 {
  margin: 0 0 0.55556rem 0;
  font-family: 'Roboto', sans-serif;
  font-size: 1.125em;
  font-weight: 500;
  line-height: 1.5; }

p, ol, ul, li, dt, dd, blockquote {
  margin: 0 0 0.55556rem 0;
  font-family: 'Roboto', sans-serif;
  font-size: 1.125em;
  line-height: 1.5; }

* {
  box-sizing: border-box; }

html, body {
  height: 100%;
  background: #1c1717;
  color: #8d8383; }

img, picture {
  max-width: 100%;
  margin: 0; }

.wrapper--conversation {
  z-index: -100;
  margin: 0 0 4.44444rem 0; }

.conversation__link {
  color: #554646; }

.conversation__meta {
  border-top: 0.16667rem solid #382e2e; }

.conversation__date {
  transition: color 0.25s ease-in-out;
  position: relative;
  top: -0.55556rem;
  margin-left: 0.83333rem;
  padding: 0.55556rem;
  font-size: 0.79012em;
  text-transform: uppercase;
  letter-spacing: 0.05rem;
  background: #1c1717;
  color: #554646; }

.conversation__date__date {
  margin-right: 0.27778rem; }

.message, .header--site__title__accent {
  position: relative;
  margin: 2.22222rem 0 3.33333rem 0;
  border-radius: 0.27778rem;
  padding: 0.83333rem 1.11111rem;
  background: #40b65d; }
  .message:hover, .header--site__title__accent:hover, .message:focus, .header--site__title__accent:focus, .message:active, .header--site__title__accent:active {
    box-shadow: 0 2px 1px 0 #040303; }
  .message:after, .header--site__title__accent:after {
    position: absolute;
    bottom: -1.11111rem;
    content: "";
    font-size: 0; }

.message {
  transition: all 0.25s ease-in-out;
  opacity: 0.80;
  background: #554646;
  font-size: 1.125em;
  letter-spacing: 0.025rem;
  color: white; }
  .message:hover, .message:focus, .message:active {
    -webkit-transform: scale(1.025);
    transform: scale(1.025);
    opacity: 1; }
    .message:hover:before, .message:focus:before, .message:active:before {
      color: #8d8383; }
  .message:before {
    transition: color 0.25s ease-in-out;
    position: absolute;
    top: -25px;
    left: 1.11111rem;
    content: "";
    font-size: 0.70233em;
    color: #554646; }
  .message:last-child {
    margin-bottom: 0; }
  .message:first-child {
    margin-top: 1.66667rem; }

.message--joe {
  background: #40b65d; }
  .message--joe:after {
    height: 0;
    width: 0;
    border-top: 20px solid #40b65d;
    border-left: 20px solid transparent;
    right: 1.11111rem; }
  .message--joe:before {
    content: "Joe"; }

.message--her {
  background: #ea6a65; }
  .message--her:after {
    height: 0;
    width: 0;
    border-top: 20px solid #ea6a65;
    border-right: 20px solid transparent;
    left: 1.11111rem; }
  .message--her:before {
    content: "Her"; }

.message--him {
  background: #2a9dd7; }
  .message--him:after {
    height: 0;
    width: 0;
    border-top: 20px solid #2a9dd7;
    border-right: 20px solid transparent;
    left: 1.11111rem; }
  .message--him:before {
    content: "Him"; }

.header--site__title {
  margin-bottom: 3.33333rem;
  font-size: 1.42383em;
  font-weight: 400;
  text-transform: uppercase;
  letter-spacing: 0.2rem;
  color: #f6f5f5; }
  .header--site__title a {
    color: #f6f5f5;
    padding: 0;
    border-bottom: 0; }

.header--site__tagline {
  margin-bottom: 0.55556rem;
  font-size: 1.125em;
  color: #8d8383; }

.header--site__title__accent {
  background: #f6f5f5;
  color: #040303; }
  .header--site__title__accent:after {
    height: 0;
    width: 0;
    border-top: 20px solid #f6f5f5;
    border-left: 20px solid transparent;
    position: absolute;
    bottom: -1.11111rem;
    content: "";
    font-size: 0;
    right: 1.11111rem; }

.footer--site {
  border-top: 0.11111rem solid #040303;
  padding-top: 1.11111rem; }

.footer--site__copyright {
  font-size: 0.88889em;
  color: #554646; }

.about {
  margin-top: 1.66667rem;
  border-top: 0.11111rem solid #040303;
  padding-top: 1.11111rem; }

.about__title {
  font-size: 0.88889em;
  font-weight: 400;
  color: #f6f5f5;
  text-transform: uppercase;
  letter-spacing: 0.1rem; }

.about__copy {
  font-size: 0.88889em;
  color: #8d8383; }

.wrapper--view {
  padding: 3.33333rem 2.22222rem; }
  @media  (min-width: 768px) {
    .wrapper--view {
      padding: 4.44444rem 3.33333rem; } }

.wrapper--grid {
  max-width: 58.33333rem;
  margin-left: auto;
  margin-right: auto;
  @at-root head {
    display: block;
    position: fixed;
    right: 10px;
    top: 10px;
    z-index: 999;
    color: #333;
    background: rgba(255, 255, 255, 0.25); }

  @at-root head:before {
    content: "|||";
    display: block;
    padding: 5px 10px;
    font-family: sans-serif;
    font-size: 16px;
    font-weight: bold; }

  @at-root head:hover {
    background: rgba(255, 255, 255, 0.5);
    color: red; }
 }
  .wrapper--grid:after {
    content: " ";
    display: block;
    clear: both; }
  head:hover ~ .wrapper--grid, head:hover ~ body .wrapper--grid {
    position: relative; }
    head:hover ~ .wrapper--grid:before, head:hover ~ body .wrapper--grid:before {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      content: " ";
      z-index: 998;
      background-image: linear-gradient(to right, blue, #4d4dff 66.66667%, transparent 66.66667%);
      background-size: 8.57143%;
      background-origin: content-box;
      background-clip: content-box;
      background-position: left top; }

.header--site {
  text-align: center; }
  @media  (min-width: 1024px) {
    .header--site {
      text-align: left; } }

.header--site__title__prefix {
  display: block;
  margin-bottom: 1.11111rem; }
  @media  (min-width: 1024px) {
    .header--site__title__prefix {
      display: inline;
      margin-bottom: 0; } }

.content--aside {
  width: 100%;
  float: right;
  margin-right: 0;
  margin-bottom: 2.22222rem; }
  @media  (min-width: 768px) {
    .content--aside {
      width: 31.42857%;
      float: right;
      margin-right: 0; } }

.content--main {
  width: 100%;
  float: right;
  margin-right: 0; }
  @media  (min-width: 768px) {
    .content--main {
      width: 57.14286%;
      float: left;
      margin-right: 2.85714%; } }

.footer--site {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0;
  margin-top: 3.33333rem; }

.about {
  text-align: center; }
  @media  (min-width: 1024px) {
    .about {
      text-align: left; } }

.conversation__meta {
  text-align: center; }
  @media  (min-width: 1024px) {
    .conversation__meta {
      text-align: left; } }


/*# sourceMappingURL=data:application/json;base64, */